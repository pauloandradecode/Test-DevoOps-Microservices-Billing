# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- feature/*

variables:
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: Build the application
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest

    steps:

    - task: DownloadSecureFile@1
      name: mvnSettings
      displayName: 'Download Maven settings'
      inputs:
        # Hay que agregar este archivo como seguro desde devops
        secureFile: 'maven-azuredevops-settings.xml'
    - task: MavenAuthenticate@0
      displayName: 'Maven Authenticate Artifacts'
      inputs:
        artifactsFeeds: 'Common_Artifac'

    - task: Maven@3
      displayName: 'Compile Package'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mavenAuthenticateFeed: true
        goals: 'package'
        options: '-X -P azure_artifacts -s $(mvnSettings.secureFilePath)'

    - task: CopyFiles@1
      # Nombre para reconocerlo en el log
      displayName: 'Copy JAR Artifact to pipeline artifact'
      # Condición para que se ejecute (solo si la tarea anterior fue exitosa)
      condition: succeeded()
      inputs:
        # Directorio donde vamos encontrar los archivos a copiar (el compilado)
        SourceFolder: '$(System.DefaultWorkingDirectory)/target/'
        # Buscamos el archivo .jar
        Contents: '**/*.jar'
        # Directorio donde vamos a copiar el archivo .jar
        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(Build.BuildConfiguration)'
        # Limpiamos el directorio antes de copiar
        CleanTargetFolder: true

    - task: ArchiveFiles@2
      # Nombre para reconocerlo en el log
      displayName: 'Archive JAR Artifact'
      # Condición para que se ejecute (solo si la tarea anterior fue exitosa)
      condition: succeeded()
      inputs:
        # Directorio donde vamos encontrar los archivos a comprimir
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/target/'
        # Nombre del archivo comprimido
        includeRootFolder: true
        # Nombre del archivo comprimido
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildConfiguration)/$(Build.BuildId).zip'
        # Formato del archivo comprimido
        archiveType: 'zip'
        # reemplazamos el archivo si ya existe
        replaceExistingArchive: true
        # Limpiamos el directorio antes de comprimir
        cleanDestinationFolder: true

    - task: PublishBuildArtifacts@1
      # Nombre para reconocerlo en el log
      displayName: 'Publish Artifact'
      # Condición para que se ejecute (solo si la tarea anterior fue exitosa)
      condition: succeeded()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'